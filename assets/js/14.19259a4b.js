(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{426:function(v,_,T){"use strict";T.r(_);var t=T(62),P=Object(t.a)({},(function(){var v=this,_=v.$createElement,T=v._self._c||_;return T("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[T("h1",{attrs:{id:"http-2"}},[T("a",{staticClass:"header-anchor",attrs:{href:"#http-2"}},[v._v("#")]),v._v(" HTTP/2")]),v._v(" "),T("p",[v._v("HTTP1.1 期间也出现了一些对 HTTP 不满的意见，主要就是连接慢，无法跟上迅猛发展的互联网，但 HTTP/1.1 标准一直“岿然不动”，无奈之下人们只好发明各式各样的“小花招”来缓解这些问题，比如以前常见的切图、JS 合并等网页优化手段。")]),v._v(" "),T("p",[v._v("Google 首先开发了自己的浏览器 Chrome，然后推出了新的 SPDY 协议，并在 Chrome 里应用于自家的服务器。")]),v._v(" "),T("p",[v._v("Google 借此顺势把 SPDY 推上了标准的宝座，互联网标准化组织以 SPDY 为基础开始制定新版本的 HTTP 协议，最终在 2015 年发布了 HTTP/2，RFC 编号 7540。")]),v._v(" "),T("p",[v._v("HTTP/2 协议规范于 2015 年 5 月正式发布，从目前的情况来看，国内外一些排名靠前的站点基本都实现了 HTTP/2 的部署。使用 HTTP/2 能带来 20%～60% 的效率提升。")]),v._v(" "),T("h3",{attrs:{id:"http-1-1主要问题"}},[T("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1主要问题"}},[v._v("#")]),v._v(" HTTP/1.1主要问题")]),v._v(" "),T("p",[v._v("HTTP/1.1 对带宽的利用率不是很理想（核心问题）")]),v._v(" "),T("p",[T("code",[v._v("带宽：每秒最大能发送或者接收的字节数")]),v._v("。我们把每秒能发送的最大字节数称为上行带宽，每秒能够接收的最大字节数称为下行带宽。")]),v._v(" "),T("p",[v._v("HTTP/1.1 很难将带宽用满。比如常说的 100M 带宽，实际的下载速度能达到 12.5M/S，而采用 HTTP/1.1 时，也许在加载页面资源时最大只能使用到 2.5M/S，很难将 12.5M 全部用满。 有三个原因:")]),v._v(" "),T("ol",[T("li",[v._v("第一个原因，TCP的慢启动"),T("code",[v._v("(TCP本身的机制导致)")]),v._v("\n一旦一个 TCP 连接建立之后, 就进入了发送数据状态, 刚开始 TCP 协议会采用一个非常慢的速度去发送数据，然后慢慢加快速度发送数据，直到发送数据的速度达到一个理想状态，这个过程称为慢启动.")])]),v._v(" "),T("p",[v._v("慢启动时 TCP 为了减少网络拥塞的一种策略，没有办法去改变它。")]),v._v(" "),T("p",[v._v("但是在页面中常用的一些关键资源文件本来就不大，HTML文件、CSS文件、Js文件，通常这些文件在TCP建立好之后就要请求的，但这个过程慢启动，耗费的时间比正常的时间要多很多，这样就推迟了首次渲染页面的时间了。")]),v._v(" "),T("ol",{attrs:{start:"2"}},[T("li",[v._v("同时开启多条TCP连接，那么这些连接会竞争固定的带宽。"),T("code",[v._v("(TCP本身的机制导致)")]),v._v("\n系统同时建立了多条 TCP 连接，当带宽充足时，每条连接发送或者接收速度会慢慢向上增加；而一旦带宽不足时，这些 TCP 连接又会减慢发送或者接收的速度。3，也就是 18 个 TCP 连接来下载资源；在下载过程中，当发现带宽不足的时候，各个 TCP 连接就需要动态减慢接收数据的速度。")])]),v._v(" "),T("p",[v._v("因为有的TCP连接下载的是关键资源，如CSS文件，JS文件，而有的TCP连接下载的是图片、视频等普通资源文件，但是多条 TCP 连接之间又不能协商让哪些关键资源优先下载，这样就有可能影响那些关键资源的下载速度了。")]),v._v(" "),T("ol",{attrs:{start:"3"}},[T("li",[v._v("HTTP/1.1 队头阻塞的问题。"),T("code",[v._v("(HTTP/1.1的机制导致)")])])]),v._v(" "),T("p",[v._v("我们知道在 HTTP/1.1 中使用持久连接时，虽然能公用一个 TCP 管道, 但是在一个管道中同一时刻只能处理一个请求，在当前的请求没有结束之前，其他的请求只能处于阻塞状态。这意味着我们不能随意在一个管道中发送请求和接收内容。")]),v._v(" "),T("p",[v._v("这是一个很严重的问题，因为阻塞请求的因素有很多，并且都是一些不确定性的因素，假如有的请求被阻塞了 5 秒，那么后续排队的请求都要延迟等待 5 秒，在这个等待的过程中，带宽、CPU 都被白白浪费了。")]),v._v(" "),T("p",[v._v("在浏览器处理生成页面的过程中，非常希望提前收到数据，这样就可以对这些数据做预处理操作，比如提前接收到了图片，那么就可以提前进行编解码操作，等到需要使用该图片的时候，就可以直接给出处理后的数据了，这样能让用户感受到整体速度的提升。")]),v._v(" "),T("p",[v._v("但队头阻塞使得这些数据不能并行请求，所以队头阻塞是很不利于浏览器优化的。")]),v._v(" "),T("h3",{attrs:{id:"解决方式-http-2多路复用"}},[T("a",{staticClass:"header-anchor",attrs:{href:"#解决方式-http-2多路复用"}},[v._v("#")]),v._v(" 解决方式 (HTTP/2多路复用)")]),v._v(" "),T("p",[v._v("虽然TCP有问题，但是我们没有办法去更改TCP。所以慢启动和TCP连接之间的竞争问题无法处理。")]),v._v(" "),T("p",[v._v("HTTP/2的思路就是一个域名只使用一个TCP长连接来传输数据，这样整个页面资源的下载过程只需要一次慢启动，同时避免了多个TCP连接竞争带来的问题。")]),v._v(" "),T("p",[v._v("针对队头阻塞问题，HTTP/2 需要实现资源的并行请求，任何时候可以将请求发送给服务器，而并不需要等待其他请求的完成，然后服务器也可以随时返回处理好的请求资源给浏览器。")]),v._v(" "),T("p",[v._v("HTTP/2的解决方案：一个域名只使用一个 TCP 长连接和消除队头阻塞问题。")]),v._v(" "),T("p",[v._v("每个请求都有一个对应的 ID，如 stream1 表示 index.html 的请求，stream2 表示 foo.css 的请求。这样在浏览器端，就可以随时发送给服务器了。")]),v._v(" "),T("p",[v._v("服务端接收到这些请求后，会根据自己的喜好来决定优先返回哪些内容，比如服务器可能早就缓存好了 index.html 和 bar.js 的响应头信息，那么当接收到请求的时候就可以立即把 index.html 和 bar.js 的响应头信息返回给浏览器,然后再将 index.html 和 bar.js 的响应体数据返回给浏览器。之所以可以随意发送，是因为每份数据对应的ID，浏览器接收到之后，会筛选出相同的 ID 内容，将其拼接为完整的 HTTP 响应数据。")]),v._v(" "),T("p",[v._v("HTTP/2 使用了多路复用技术，可以将请求分成一帧一帧的数据去传输,这样带来了一个额外的好处，就是当收到一个优先级高的请求时，比如接收到 JavaScript 或者 CSS 关键资源的请求，服务器可以暂停之前的请求来优先处理关键资源的请求。")]),v._v(" "),T("h3",{attrs:{id:"实现"}},[T("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[v._v("#")]),v._v(" 实现")]),v._v(" "),T("p",[v._v("HTTP/2 添加了一个二进制分帧层。")]),v._v(" "),T("ul",[T("li",[v._v("首先，浏览器准备好请求数据，请求行、请求头，请求体。")]),v._v(" "),T("li",[v._v("这些数据在经过二进制分帧层之后，会被转换为一个个带有请求 ID 编号的帧，通过协议栈将这些帧发送给服务器。")]),v._v(" "),T("li",[v._v("服务器接收到所有帧之后，会将所有相同ID帧合并为一条完整的请求信息。")]),v._v(" "),T("li",[v._v("然后服务器处理该条请求，并将处理的响应行、响应头和响应体分别发送给二进制分帧层")]),v._v(" "),T("li",[v._v("二进制分帧层会将这些响应数据转换为一个个带有ID编号的帧，经过协议栈发送给浏览器。")]),v._v(" "),T("li",[v._v("浏览器接收到响应帧之后，会根据ID编号将帧的数据提交给对应的请求。")])]),v._v(" "),T("p",[v._v("通过引入二进制分帧层，就实现了 HTTP 的多路复用技术。")]),v._v(" "),T("h3",{attrs:{id:"其他特征"}},[T("a",{staticClass:"header-anchor",attrs:{href:"#其他特征"}},[v._v("#")]),v._v(" 其他特征")]),v._v(" "),T("ol",[T("li",[T("p",[v._v("可以设置请求的优先级\n根据数据的重要程度，如果服务器按照请求的顺序来回复数据，可能这个重要的数据会推迟很久才能送达浏览器。HTTP/2 提供了请求优先级，可以在发送请求时，标上该请求头的优先级，这样服务器接收到请求之后，会优先处理优先级高的请求。")])]),v._v(" "),T("li",[T("p",[v._v("服务器推送\nHTTP/2 可以直接将数据提前推送到浏览器。如果服务器知道该HTML会引用几个重要的js文件和css文件，这样浏览器解析完html之后，就能直接拿到css和js文件。")])]),v._v(" "),T("li",[T("p",[v._v("头部压缩\n不管是HTTP/1.1 还是 HTTP/2，它们都有请求头和相应头。HTTP/2 对请求头和相应头进行了压缩。使用专门算法压缩头部，减少数据传输量。")])])]),v._v(" "),T("p",[v._v("HTTP/2 解决了HTTP/1.1队头阻塞的问题")])])}),[],!1,null,null,null);_.default=P.exports}}]);