(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{443:function(a,t,s){"use strict";s.r(t);var r=s(62),e=Object(r.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"数据如何传输"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据如何传输"}},[a._v("#")]),a._v(" 数据如何传输")]),a._v(" "),s("p",[a._v("互联网中的数据是通过数据包来传输的。如果发送的数据很大，那么该数据就会被拆分为很多小数据来传输。比如你现在听的音频数据，是拆分成一个个小的数据包来传输的，并不是一个大的文件一次传输过来的。")]),a._v(" "),s("h3",{attrs:{id:"http"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[a._v("#")]),a._v(" HTTP")]),a._v(" "),s("p",[a._v("浏览器使用 HTTP 协议作为应用层协议，用来封装请求的文本信息；并使用 TCP/IP 作为传输层协议将它发送到网络上，所以在 HTTP 工作开始之前，浏览器需要通过 TCP 与服务器建立连接。也就是说 HTTP 的内容是通过 TCP 的传输数据阶段来实现的，你可以结合下图更好地理解这二者的关系。")]),a._v(" "),s("h3",{attrs:{id:"udp-把数据包送达应用程序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#udp-把数据包送达应用程序"}},[a._v("#")]),a._v(" UDP: 把数据包送达应用程序")]),a._v(" "),s("p",[a._v("IP 是非常底层的协议, 只负责把数据包传送到对方电脑, 但是对方电脑并不知道把数据包交给哪个程序，是交给浏览器还是交给王者荣耀？因此，需要基于 IP 之上开发能和应用打交道的协议，最常见的是“用户数据包协议（User Datagram Protocol）”，简称 UDP。")]),a._v(" "),s("p",[a._v("UDP 中一个最重要的信息是端口号, 端口号其实就是一个数字，每个想访问网络的程序都需要绑定一个端口号。通过端口号 UDP 就能把指定的数据包发送给指定的程序了，所以 IP 通过 IP 地址信息把数据包发送给指定的电脑，而 UDP 通过端口号把数据包分发给正确的程序。和 IP 头一样，端口号会被装进 UDP 头里面，UDP 头再和原始数据包合并组成新的 UDP 数据包。UDP 头中除了目的端口，还有源端口号等信息。")]),a._v(" "),s("p",[a._v("在使用 UDP 发送数据时，有各种因素会导致数据包出错, 虽然 UDP 可以校验数据是否正确，但是对于错误的数据包，UDP 并不提供重发机制，只是丢弃当前的包，而且 UDP 在发送之后也无法知道是否能达到目的地。")]),a._v(" "),s("p",[a._v("虽说 UDP 不能保证数据可靠性，但是传输速度却非常快，所以 UDP 会应用在一些关注速度、但不那么严格要求数据完整性的领域，如在线视频、互动游戏等。")]),a._v(" "),s("h3",{attrs:{id:"tcp-把数据完整地送达应用程序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-把数据完整地送达应用程序"}},[a._v("#")]),a._v(" TCP: 把数据完整地送达应用程序")]),a._v(" "),s("p",[a._v("对于浏览器请求，或者邮件这类要求数据传输可靠性（reliability）的应用，如果使用 UDP 来传输会存在两个问题：")]),a._v(" "),s("ul",[s("li",[a._v("数据包在传输过程中容易丢失；")]),a._v(" "),s("li",[a._v("大文件会被拆分成很多小的数据包来传输，这些小的数据包会经过不同的路由，并在不同的时间到达接收端，而 UDP 协议并不知道如何组装这些数据包，从而把这些数据包还原成完整的文件。")])]),a._v(" "),s("p",[a._v("TCP（Transmission Control Protocol，传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议。")]),a._v(" "),s("ul",[s("li",[a._v("对于数据包丢失的情况，TCP 提供重传机制；")]),a._v(" "),s("li",[a._v("TCP 引入了数据包排序机制，用来保证把乱序的数据包组合成一个完整的文件。")])]),a._v(" "),s("p",[a._v("和 UDP 头一样，TCP 头除了包含了目标端口和本机端口号外，还提供了用于排序的序列号，以便接收端通过序号来重排数据包。")]),a._v(" "),s("p",[a._v("一个完整的 TCP 连接的生命周期包括了“建立连接”“传输数据”和“断开连接”三个阶段。")]),a._v(" "),s("ul",[s("li",[a._v("首先，建立连接阶段. 这个阶段是通过“三次握手”来建立客户端和服务器之间的连接。TCP 提供面向连接的通信传输。面向连接是指在数据通信开始之前先做好两端之间的准备工作。所谓三次握手，是指在建立一个 TCP 连接时，客户端和服务器总共要发送三个数据包以确认连接的建立。")]),a._v(" "),s("li",[a._v("其次，传输数据阶段。在该阶段，接收端需要对每个数据包进行确认操作，也就是接收端在接收到数据包之后，需要发送确认数据包给发送端。所以当发送端发送了一个数据包之后，在规定时间内没有接收到接收端反馈的确认消息，则判断为数据包丢失，并触发发送端的重发机制。同样，一个大的文件在传输过程中会被拆分成很多小的数据包，这些数据包到达接收端后，接收端会按照 TCP 头中的序号为其排序，从而保证组成完整的数据。")]),a._v(" "),s("li",[a._v("断开连接阶段。数据传输完毕之后，就要终止连接了，涉及到最后一个阶段“四次挥手”来保证双方都能断开连接。")])]),a._v(" "),s("p",[a._v("TCP 为了保证数据传输的可靠性，牺牲了数据包的传输速度，因为“三次握手”和“数据包校验机制”等把传输过程中的数据包的数量提高了一倍。")]),a._v(" "),s("h3",{attrs:{id:"ip-把数据包送达目的主机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ip-把数据包送达目的主机"}},[a._v("#")]),a._v(" IP: 把数据包送达目的主机")]),a._v(" "),s("p",[a._v("数据包要在互联网上进行传输，就要符合网际协议（IP）标准。")]),a._v(" "),s("p",[a._v("计算机的地址就称为 IP 地址，访问任何网站实际上只是你的计算机向另外一台计算机请求信息。")]),a._v(" "),s("p",[a._v("要想把一个数据包从主机 A 发送给主机 B，那么在传输之前，数据包上会被附加上主机 B 的 IP 地址信息， 这样在传输过程中才能正确寻址。这些附加的信息会被装进一个叫 IP 头的数据结构里。IP 头是 IP 数据包开头的信息，包含 IP 版本、源 IP 地址、目标 IP 地址、生存时间等信息。")]),a._v(" "),s("h3",{attrs:{id:"为什么第二次打开站点速度更快"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么第二次打开站点速度更快"}},[a._v("#")]),a._v(" 为什么第二次打开站点速度更快")]),a._v(" "),s("p",[a._v("主要原因是第一次加载页面过程中，缓存了一些耗时的数据。")]),a._v(" "),s("p",[a._v("DNS 缓存和页面资源缓存这两块数据是会被浏览器缓存的。其中，DNS 缓存比较简单，它主要就是在浏览器本地把对应的 IP 和域名关联起来。")]),a._v(" "),s("p",[a._v("当服务器返回 HTTP 响应头给浏览器时, 浏览器是通过响应头中的 Cache-Control 字段来设置是否缓存该资源。我们还需要为这个资源设置一个缓存过期时长, 而这个时长是通过 Cache-Control 中的 Max-age 参数来设置的")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("Cache"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("Control"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v("Max"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("age"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2000")]),a._v("\n")])])]),s("p",[a._v("在该缓存资源还未过期的情况下, 如果再次请求该资源，会直接返回缓存中的资源给浏览器。")]),a._v(" "),s("p",[a._v("但如果缓存过期了，浏览器则会继续发起网络请求，并且在 HTTP 请求头中带上：")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("If"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("None"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("Match"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"4f80f-13c-3a1xb12a"')]),a._v("\n")])])]),s("p",[a._v("服务器收到请求头后，会根据 If-None-Match 的值来判断请求的资源是否有更新。")]),a._v(" "),s("ul",[s("li",[a._v("如果没有更新，就返回 304 状态码，相当于服务器告诉浏览器：“这个缓存可以继续使用，这次就不重复发送数据给你了。”")]),a._v(" "),s("li",[a._v("如果资源有更新，服务器就直接返回最新资源给浏览器。")])]),a._v(" "),s("p",[a._v("简要来说，很多网站第二次访问能够秒开，是因为这些网站把很多资源都缓存在了本地，浏览器缓存直接使用本地副本来回应请求，而不会产生真实的网络请求，从而节省了时间。同时，DNS 数据也被浏览器缓存了，这又省去了 DNS 查询环节。")]),a._v(" "),s("h3",{attrs:{id:"状态如何保持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#状态如何保持"}},[a._v("#")]),a._v(" 状态如何保持")]),a._v(" "),s("p",[a._v("用户打开登录页面，在登录框里填入用户名和密码，点击确定按钮。点击按钮会触发页面脚本生成用户登录信息，然后调用 POST 方法提交用户登录信息给服务器。")]),a._v(" "),s("p",[a._v("服务器接收到浏览器提交的信息之后，查询后台，验证用户登录信息是否正确，如果正确的话，会生成一段表示用户身份的字符串，并把该字符串写到响应头的 Set-Cookie 字段里，如下所示，然后把响应头发送给浏览器。")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("Set"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("Cookie"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("UID")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("3431uad"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("浏览器在接收到服务器的响应头后, 开始解析响应头，如果遇到响应头里含有 Set-Cookie 字段的情况，浏览器就会把这个字段信息保存到本地。比如把UID=3431uad保持到本地。")]),a._v(" "),s("p",[a._v("当用户再次访问时，浏览器会发起 HTTP 请求，但在发起请求之前，浏览器会读取之前保存的 Cookie 数据，并把数据写进请求头里的 Cookie 字段里（如下所示），然后浏览器再将请求头发送给服务器。")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token literal-property property"}},[a._v("Cookie")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[a._v("UID")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("3431uad"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("服务器在收到 HTTP 请求头数据之后，就会查找请求头里面的“Cookie”字段信息，当查找到包含UID=3431uad的信息时，服务器查询后台，并判断该用户是已登录状态，然后生成含有该用户信息的页面数据，并把生成的数据发送给浏览器。")]),a._v(" "),s("p",[a._v("浏览器在接收到该含有当前用户的页面数据后，就可以正确展示用户登录的状态信息了。")])])}),[],!1,null,null,null);t.default=e.exports}}]);