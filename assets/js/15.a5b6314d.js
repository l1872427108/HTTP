(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{430:function(T,v,_){"use strict";_.r(v);var t=_(62),P=Object(t.a)({},(function(){var T=this,v=T.$createElement,_=T._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":T.$parent.slotKey}},[_("h1",{attrs:{id:"http-3"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-3"}},[T._v("#")]),T._v(" HTTP/3")]),T._v(" "),_("p",[T._v("HTTP/2 在 2018 年就开始得到了大规模的应用，HTTP/1 中存在的一大堆缺陷都得到了解决。")]),T._v(" "),_("p",[T._v("多路复用技术能充分利用带宽，最大限度规避了 TCP 的慢启动所带来的问题，同时还实现了头部压缩、服务器推送等功能，使得页面资源的传输速度得到了大幅提升。")]),T._v(" "),_("p",[T._v("不过 HTTP/2 依然存在一些缺陷，于是就有了 HTTP/3。")]),T._v(" "),_("h3",{attrs:{id:"http-2缺陷-tcp队头阻塞"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-2缺陷-tcp队头阻塞"}},[T._v("#")]),T._v(" HTTP/2缺陷---TCP队头阻塞")]),T._v(" "),_("p",[T._v("虽然 HTTP/2 解决了应用层面的队头阻塞问题, 不过和 HTTP/1.1 一样，HTTP/2 依然是基于 TCP 协议的，而 TCP 最初就是为了单连接而设计的。你可以把 TCP 连接看成是两台计算机之前的一个虚拟管道，计算机的一端将要传输的数据按照顺序放入管道，最终数据会以相同的顺序出现在管道的另外一头。")]),T._v(" "),_("p",[T._v("HTTP/1.1 协议栈中 TCP 是如何传输数据的。为直观理解，你可以参考下图：")]),T._v(" "),_("p",[T._v("从一端发送给另外一端的数据会被拆分为一个个按照顺序排列的数据包, 这些数据包通过网络传输到了接收端, 接收端再按照顺序将这些数据包组合成原始数据，这样就完成了数据传输。")]),T._v(" "),_("p",[T._v("不过，如果在数据传输的过程中, 如果一个数据包因为网络故障或者其他原因丢包了，那么整个TCP的连接就会处于暂停状态，需要等待丢失的数据包被重新传输过来。")]),T._v(" "),_("p",[T._v("你可以把 TCP 连接看成是一个按照顺序传输数据的管道，管道中的任意一个数据丢失了，那之后的数据都需要等待该数据的重新传输。为了直观理解，你可以参考下图：")]),T._v(" "),_("p",[T._v("我们就把在 TCP 传输过程中，由于单个数据包的丢失而造成的阻塞称为 TCP 上的队头阻塞。")]),T._v(" "),_("p",[T._v("那队头阻塞是怎么影响 HTTP/2 传输的呢？首先我们来看正常情况下 HTTP/2 是怎么传输多路请求的，为了直观理解，你可以参考下图：")]),T._v(" "),_("p",[T._v("我们知道在 HTTP/2 中，多个请求是跑在一个 TCP 管道中的, 如果其中任意一路数据流中出现了丢包的情况，那么就会阻塞该TCP连接中的所有请求。不同于HTTP/1.1，使用 HTTP/1.1 时，浏览器为每个域名开启了 6 个 TCP 连接，如果其中的 1 个 TCP 连接发生了队头阻塞，那么其他的 5 个连接依然可以继续传输数据。")]),T._v(" "),_("p",[T._v("所以，随着丢包率的增加，HTTP/2 的传输效率会越来越差，当系统达到了 2% 的丢包率时，HTTP/1.1 的传输效率反而比 HTTP/2 表现得更好。")]),T._v(" "),_("h3",{attrs:{id:"http-2缺陷-tcp建立连接的延时"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-2缺陷-tcp建立连接的延时"}},[T._v("#")]),T._v(" HTTP/2缺陷---TCP建立连接的延时")]),T._v(" "),_("p",[T._v("网络延迟又称 RTT。我们把从浏览器发送一个数据包到服务器，再从服务器返回数据包到浏览器的整个往返时间称为 RTT。")]),T._v(" "),_("p",[T._v("HTTP/1 和 HTTP/2 都是使用 TCP 协议来传输的，而如果使用 HTTPS 的话，还需要使用 TLS 协议进行安全传输，而使用 TLS 也需要一个握手, 这就需要两个握手延迟过程。")]),T._v(" "),_("ol",[_("li",[_("p",[T._v("在建立 TCP 连接的时候，需要和服务器进行三次握手来确认连接成功，也就是说需要在消耗完 1.5 个 RTT 之后才能进行数据传输。")])]),T._v(" "),_("li",[_("p",[T._v("进行 TLS 连接，TLS 有两个版本——TLS1.2 和 TLS1.3，每个版本建立连接所花的时间不同，大致是需要 1～2 个 RTT。")])]),T._v(" "),_("li",[_("p",[T._v("在传输数据之前，我们需要花掉 3～4 个 RTT。如果浏览器和服务器的物理距离较近，那么 1 个 RTT 的时间可能在 10 毫秒以内，也就是说总共要消耗掉 30～40 毫秒。但如果服务器相隔较远，那么 1 个 RTT 就可能需要 100 毫秒以上了，这种情况下整个握手过程需要 300～400 毫秒，这时用户就能明显地感受到“慢”了。")])])]),T._v(" "),_("h3",{attrs:{id:"tcp-协议僵化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp-协议僵化"}},[T._v("#")]),T._v(" TCP 协议僵化")]),T._v(" "),_("p",[T._v("由于TCP队头阻塞和建立连接延迟等缺点。但是改变TCP协议来解决这些问题非常难。原因有两个:")]),T._v(" "),_("ol",[_("li",[T._v("第一个是中间设备的僵化。互联网是由多个网络互联的网状结构， 为了能够保障互联网的正常工作，我们需要在互联网的各处搭建各种设备，这些设备就被称为中间设备。")])]),T._v(" "),_("p",[T._v("这些路由包括了路由器、防火墙、NAT、交换机等。通常依赖一些很少升级的软件，这些软件使用了大量的 TCP 特性，这些功能被设置之后就很少更新了。")]),T._v(" "),_("p",[T._v("如果在客户端升级了 TCP 协议，但是当新协议的数据包经过这些中间设备时，它们可能不理解包的内容，于是这些数据就会被丢弃掉。这就是中间设备僵化，它是阻碍 TCP 更新的一大障碍。")]),T._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[T._v("除了中间设备僵化外，操作系统也是导致 TCP 协议僵化的另外一个原因。因为 TCP 协议都是通过操作系统内核来实现的，应用程序只能使用不能修改。通常操作系统的更新都滞后于软件的更新，因此要想自由地更新内核中的 TCP 协议也是非常困难的。")])]),T._v(" "),_("h3",{attrs:{id:"quic-协议"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#quic-协议"}},[T._v("#")]),T._v(" QUIC 协议")]),T._v(" "),_("p",[T._v("HTTP/2 存在一些比较严重的于TCP协议相关的缺陷，但由于TCP协议僵化，几乎不可能通过修改 TCP 协议自身来解决这些问题，解决问题的思路是绕过 TCP 协议，发明一个 TCP 和 UDP 之外的新的传输协议。")]),T._v(" "),_("p",[T._v("但是这些中间设备，只认TCP和UDP，如果采用新的协议，这些设备同样不被很好的支持。")]),T._v(" "),_("p",[T._v("HTTP/3 选择了一个折衷的方法----UDP协议，基于UDP实现类似于TCP的多路数据流、传输可靠性等功能，这套功能被称为 QUIC 协议。")]),T._v(" "),_("ul",[_("li",[T._v("实现了类似 TCP 的流量控制、传输可靠性的功能。虽然 UDP 不可以，但 QUIC 在 UDP 的基础上增加了一层来保证数据可靠性传输。它提供了数据包重传、拥塞控制以及其他一些TCP存在的特性。")]),T._v(" "),_("li",[T._v("集成了 TLS 加密功能。 QUIC使用的是 TLS1.3，相比较早期版本 TLS1.3 有更多优点，其中最重要的一点是减少了握手所花费的 RTT 个数。")]),T._v(" "),_("li",[T._v("实现了 HTTP/2 中多路复用功能。和TCP不同，QUIC实现了在同一物理连接上可以有多个独立的逻辑数据流。实现了数据流的单独传输, 就解决了 TCP 中队头阻塞的问题。")]),T._v(" "),_("li",[T._v("实现了快速握手功能。由于 QUIC 是基于 UDP 的，所以 QUIC 可以实现使用 0-RTT 或者 1-RTT 来建立连接，这意味着 QUIC 可以用最快的速度来发送和接收数据，这样可以大大提升首次打开页面的速度。")])]),T._v(" "),_("h3",{attrs:{id:"挑战"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#挑战"}},[T._v("#")]),T._v(" 挑战")]),T._v(" "),_("ol",[_("li",[_("p",[T._v("服务器和服务器端都没有对 HTTP/3 提供比较完整的支持。Chrome 虽然在数年前就开始支持 Google 版本的 QUIC，但是这个版本的 QUIC 和官方的 QUIC 存在着非常大的差异。")])]),T._v(" "),_("li",[_("p",[T._v("部署 HTTP/3 也存在着非常大的问题。因为系统内核对 UDP 的优化远远没有达到 TCP 的优化程度，这也是阻碍 QUIC 的一个重要原因。")])]),T._v(" "),_("li",[_("p",[T._v("中间设备僵化的问题。这些设备对 UDP 的优化程度远远低于 TCP，据统计使用 QUIC 协议时，大约有 3%～7% 的丢包率。")])])])])}),[],!1,null,null,null);v.default=P.exports}}]);